// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for AddPostReasonParamType.
const (
	AppBskyFeedDefsSkeletonReasonPin    AddPostReasonParamType = "app.bsky.feed.defs#skeletonReasonPin"
	AppBskyFeedDefsSkeletonReasonRepost AddPostReasonParamType = "app.bsky.feed.defs#skeletonReasonRepost"
)

// Defines values for PostUpdateDocumentJSONBodyType.
const (
	PrivacyPolicy PostUpdateDocumentJSONBodyType = "privacy_policy"
	Tos           PostUpdateDocumentJSONBodyType = "tos"
)

// AddPostPostParam defines model for AddPostPostParam.
type AddPostPostParam struct {
	Cid string `json:"cid"`

	// FeedContext Context passed through to the client and feed generator.
	FeedContext *string    `json:"feedContext,omitempty"`
	IndexedAt   *time.Time `json:"indexedAt,omitempty"`
	Languages   *[]string  `json:"languages"`

	// Reason Reason for including the post in the feed skeleton. Currently only 'repost' reason is supported.
	Reason *AddPostReasonParam `json:"reason,omitempty"`
	Uri    string              `json:"uri"`
}

// AddPostReasonParam Reason for including the post in the feed skeleton. Currently only 'repost' reason is supported.
type AddPostReasonParam struct {
	Type AddPostReasonParamType `json:"$type"`

	// Repost Repost uri for repost type.
	Repost *string `json:"repost,omitempty"`
}

// AddPostReasonParamType defines model for AddPostReasonParam.Type.
type AddPostReasonParamType string

// RemovePostPostParam defines model for removePostPostParam.
type RemovePostPostParam struct {
	IndexedAt *time.Time `json:"indexedAt,omitempty"`
	Uri       string     `json:"uri"`
}

// PostAddPostJSONBody defines parameters for PostAddPost.
type PostAddPostJSONBody struct {
	Feed string           `json:"feed"`
	Post AddPostPostParam `json:"post"`
}

// GetGetPostsParams defines parameters for GetGetPosts.
type GetGetPostsParams struct {
	Feed   string  `form:"feed" json:"feed"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// PostRegisterFeedJSONBody defines parameters for PostRegisterFeed.
type PostRegisterFeedJSONBody struct {
	IsActive   *bool  `json:"isActive,omitempty"`
	LangFilter *bool  `json:"langFilter,omitempty"`
	Uri        string `json:"uri"`
}

// PostRemovePostJSONBody defines parameters for PostRemovePost.
type PostRemovePostJSONBody struct {
	Feed string              `json:"feed"`
	Post RemovePostPostParam `json:"post"`
}

// PostTrimFeedJSONBody defines parameters for PostTrimFeed.
type PostTrimFeedJSONBody struct {
	Feed string `json:"feed"`

	// Remain Number of posts remain in the feed.
	Remain int `json:"remain"`
}

// PostUnregisterFeedJSONBody defines parameters for PostUnregisterFeed.
type PostUnregisterFeedJSONBody struct {
	Uri string `json:"uri"`
}

// PostUpdateFeedJSONBody defines parameters for PostUpdateFeed.
type PostUpdateFeedJSONBody struct {
	IsActive   *bool  `json:"isActive,omitempty"`
	LangFilter *bool  `json:"langFilter,omitempty"`
	Uri        string `json:"uri"`
}

// PostUpdateDocumentJSONBody defines parameters for PostUpdateDocument.
type PostUpdateDocumentJSONBody struct {
	Content *string                        `json:"content"`
	Type    PostUpdateDocumentJSONBodyType `json:"type"`
	Url     *string                        `json:"url"`
}

// PostUpdateDocumentJSONBodyType defines parameters for PostUpdateDocument.
type PostUpdateDocumentJSONBodyType string

// PostAddPostJSONRequestBody defines body for PostAddPost for application/json ContentType.
type PostAddPostJSONRequestBody PostAddPostJSONBody

// PostRegisterFeedJSONRequestBody defines body for PostRegisterFeed for application/json ContentType.
type PostRegisterFeedJSONRequestBody PostRegisterFeedJSONBody

// PostRemovePostJSONRequestBody defines body for PostRemovePost for application/json ContentType.
type PostRemovePostJSONRequestBody PostRemovePostJSONBody

// PostTrimFeedJSONRequestBody defines body for PostTrimFeed for application/json ContentType.
type PostTrimFeedJSONRequestBody PostTrimFeedJSONBody

// PostUnregisterFeedJSONRequestBody defines body for PostUnregisterFeed for application/json ContentType.
type PostUnregisterFeedJSONRequestBody PostUnregisterFeedJSONBody

// PostUpdateFeedJSONRequestBody defines body for PostUpdateFeed for application/json ContentType.
type PostUpdateFeedJSONRequestBody PostUpdateFeedJSONBody

// PostUpdateDocumentJSONRequestBody defines body for PostUpdateDocument for application/json ContentType.
type PostUpdateDocumentJSONRequestBody PostUpdateDocumentJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAddPostWithBody request with any body
	PostAddPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAddPost(ctx context.Context, body PostAddPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGetPosts request
	GetGetPosts(ctx context.Context, params *GetGetPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListFeeds request
	GetListFeeds(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegisterFeedWithBody request with any body
	PostRegisterFeedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRegisterFeed(ctx context.Context, body PostRegisterFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRemovePostWithBody request with any body
	PostRemovePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRemovePost(ctx context.Context, body PostRemovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTrimFeedWithBody request with any body
	PostTrimFeedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTrimFeed(ctx context.Context, body PostTrimFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUnregisterFeedWithBody request with any body
	PostUnregisterFeedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUnregisterFeed(ctx context.Context, body PostUnregisterFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateFeedWithBody request with any body
	PostUpdateFeedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateFeed(ctx context.Context, body PostUpdateFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPing request
	GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUpdateDocumentWithBody request with any body
	PostUpdateDocumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUpdateDocument(ctx context.Context, body PostUpdateDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAddPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAddPost(ctx context.Context, body PostAddPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGetPosts(ctx context.Context, params *GetGetPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGetPostsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListFeeds(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListFeedsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegisterFeedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterFeedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegisterFeed(ctx context.Context, body PostRegisterFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterFeedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRemovePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRemovePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRemovePost(ctx context.Context, body PostRemovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRemovePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTrimFeedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTrimFeedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTrimFeed(ctx context.Context, body PostTrimFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTrimFeedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnregisterFeedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnregisterFeedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUnregisterFeed(ctx context.Context, body PostUnregisterFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUnregisterFeedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateFeedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateFeedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateFeed(ctx context.Context, body PostUpdateFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateFeedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateDocumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateDocumentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUpdateDocument(ctx context.Context, body PostUpdateDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUpdateDocumentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAddPostRequest calls the generic PostAddPost builder with application/json body
func NewPostAddPostRequest(server string, body PostAddPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAddPostRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAddPostRequestWithBody generates requests for PostAddPost with any type of body
func NewPostAddPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feed/addPost")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGetPostsRequest generates requests for GetGetPosts
func NewGetGetPostsRequest(server string, params *GetGetPostsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feed/getPosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feed", runtime.ParamLocationQuery, params.Feed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListFeedsRequest generates requests for GetListFeeds
func NewGetListFeedsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feed/listFeeds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRegisterFeedRequest calls the generic PostRegisterFeed builder with application/json body
func NewPostRegisterFeedRequest(server string, body PostRegisterFeedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRegisterFeedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRegisterFeedRequestWithBody generates requests for PostRegisterFeed with any type of body
func NewPostRegisterFeedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feed/registerFeed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRemovePostRequest calls the generic PostRemovePost builder with application/json body
func NewPostRemovePostRequest(server string, body PostRemovePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRemovePostRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRemovePostRequestWithBody generates requests for PostRemovePost with any type of body
func NewPostRemovePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feed/removePost")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTrimFeedRequest calls the generic PostTrimFeed builder with application/json body
func NewPostTrimFeedRequest(server string, body PostTrimFeedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTrimFeedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTrimFeedRequestWithBody generates requests for PostTrimFeed with any type of body
func NewPostTrimFeedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feed/trimPosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUnregisterFeedRequest calls the generic PostUnregisterFeed builder with application/json body
func NewPostUnregisterFeedRequest(server string, body PostUnregisterFeedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUnregisterFeedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUnregisterFeedRequestWithBody generates requests for PostUnregisterFeed with any type of body
func NewPostUnregisterFeedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feed/unregisterFeed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUpdateFeedRequest calls the generic PostUpdateFeed builder with application/json body
func NewPostUpdateFeedRequest(server string, body PostUpdateFeedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateFeedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateFeedRequestWithBody generates requests for PostUpdateFeed with any type of body
func NewPostUpdateFeedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/feed/updateFeed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPingRequest generates requests for GetPing
func NewGetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/gyoka/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUpdateDocumentRequest calls the generic PostUpdateDocument builder with application/json body
func NewPostUpdateDocumentRequest(server string, body PostUpdateDocumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUpdateDocumentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUpdateDocumentRequestWithBody generates requests for PostUpdateDocument with any type of body
func NewPostUpdateDocumentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/gyoka/updateDocument")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAddPostWithBodyWithResponse request with any body
	PostAddPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAddPostResponse, error)

	PostAddPostWithResponse(ctx context.Context, body PostAddPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAddPostResponse, error)

	// GetGetPostsWithResponse request
	GetGetPostsWithResponse(ctx context.Context, params *GetGetPostsParams, reqEditors ...RequestEditorFn) (*GetGetPostsResponse, error)

	// GetListFeedsWithResponse request
	GetListFeedsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListFeedsResponse, error)

	// PostRegisterFeedWithBodyWithResponse request with any body
	PostRegisterFeedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterFeedResponse, error)

	PostRegisterFeedWithResponse(ctx context.Context, body PostRegisterFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterFeedResponse, error)

	// PostRemovePostWithBodyWithResponse request with any body
	PostRemovePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRemovePostResponse, error)

	PostRemovePostWithResponse(ctx context.Context, body PostRemovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRemovePostResponse, error)

	// PostTrimFeedWithBodyWithResponse request with any body
	PostTrimFeedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTrimFeedResponse, error)

	PostTrimFeedWithResponse(ctx context.Context, body PostTrimFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTrimFeedResponse, error)

	// PostUnregisterFeedWithBodyWithResponse request with any body
	PostUnregisterFeedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnregisterFeedResponse, error)

	PostUnregisterFeedWithResponse(ctx context.Context, body PostUnregisterFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnregisterFeedResponse, error)

	// PostUpdateFeedWithBodyWithResponse request with any body
	PostUpdateFeedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateFeedResponse, error)

	PostUpdateFeedWithResponse(ctx context.Context, body PostUpdateFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateFeedResponse, error)

	// GetPingWithResponse request
	GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error)

	// PostUpdateDocumentWithBodyWithResponse request with any body
	PostUpdateDocumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateDocumentResponse, error)

	PostUpdateDocumentWithResponse(ctx context.Context, body PostUpdateDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateDocumentResponse, error)
}

type PostAddPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Feed    string `json:"feed"`
		Message string `json:"message"`
		Post    struct {
			Cid string `json:"cid"`

			// FeedContext Context passed through to the client and feed generator.
			FeedContext *string   `json:"feedContext,omitempty"`
			IndexedAt   time.Time `json:"indexedAt"`
			Languages   []string  `json:"languages"`

			// Reason Reason for including the post in the feed skeleton. Currently only 'repost' reason is supported.
			Reason *struct {
				Type PostAddPost200PostReasonType `json:"$type"`

				// Repost Repost uri for repost type.
				Repost *string `json:"repost,omitempty"`
			} `json:"reason,omitempty"`
			Uri string `json:"uri"`
		} `json:"post"`
	}
	JSON400 *struct {
		Error   PostAddPost400Error `json:"error"`
		Message *string             `json:"message,omitempty"`
	}
	JSON401 *struct {
		Error   PostAddPost401Error `json:"error"`
		Message *string             `json:"message,omitempty"`
	}
	JSON404 *struct {
		Error   PostAddPost404Error `json:"error"`
		Message *string             `json:"message,omitempty"`
	}
	JSON500 *struct {
		Error   PostAddPost500Error `json:"error"`
		Message *string             `json:"message,omitempty"`
	}
}
type PostAddPost200PostReasonType string
type PostAddPost400Error string
type PostAddPost401Error string
type PostAddPost404Error string
type PostAddPost500Error string

// Status returns HTTPResponse.Status
func (r PostAddPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAddPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGetPostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Cursor *string `json:"cursor,omitempty"`
		Feed   string  `json:"feed"`
		Posts  []struct {
			Cid         string    `json:"cid"`
			FeedContext *string   `json:"feedContext,omitempty"`
			IndexedAt   time.Time `json:"indexedAt"`
			Langs       []string  `json:"langs"`
			Reason      *struct {
				Repost string `json:"repost"`
			} `json:"reason,omitempty"`
			Uri string `json:"uri"`
		} `json:"posts"`
	}
	JSON400 *struct {
		Error   GetGetPosts400Error `json:"error"`
		Message *string             `json:"message,omitempty"`
	}
	JSON401 *struct {
		Error   GetGetPosts401Error `json:"error"`
		Message *string             `json:"message,omitempty"`
	}
	JSON404 *struct {
		Error   GetGetPosts404Error `json:"error"`
		Message *string             `json:"message,omitempty"`
	}
	JSON500 *struct {
		Error   GetGetPosts500Error `json:"error"`
		Message *string             `json:"message,omitempty"`
	}
}
type GetGetPosts400Error string
type GetGetPosts401Error string
type GetGetPosts404Error string
type GetGetPosts500Error string

// Status returns HTTPResponse.Status
func (r GetGetPostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGetPostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListFeedsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Feeds []struct {
			IsActive   bool   `json:"isActive"`
			LangFilter bool   `json:"langFilter"`
			Uri        string `json:"uri"`
		} `json:"feeds"`
	}
	JSON401 *struct {
		Error   GetListFeeds401Error `json:"error"`
		Message *string              `json:"message,omitempty"`
	}
	JSON500 *struct {
		Error   GetListFeeds500Error `json:"error"`
		Message *string              `json:"message,omitempty"`
	}
}
type GetListFeeds401Error string
type GetListFeeds500Error string

// Status returns HTTPResponse.Status
func (r GetListFeedsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListFeedsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegisterFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Feed struct {
			IsActive   bool   `json:"isActive"`
			LangFilter bool   `json:"langFilter"`
			Uri        string `json:"uri"`
		} `json:"feed"`
		Message string `json:"message"`
	}
	JSON400 *struct {
		Error   PostRegisterFeed400Error `json:"error"`
		Message *string                  `json:"message,omitempty"`
	}
	JSON401 *struct {
		Error   PostRegisterFeed401Error `json:"error"`
		Message *string                  `json:"message,omitempty"`
	}
	JSON409 *struct {
		Error   PostRegisterFeed409Error `json:"error"`
		Message string                   `json:"message"`
	}
	JSON500 *struct {
		Error   PostRegisterFeed500Error `json:"error"`
		Message *string                  `json:"message,omitempty"`
	}
}
type PostRegisterFeed400Error string
type PostRegisterFeed401Error string
type PostRegisterFeed409Error string
type PostRegisterFeed500Error string

// Status returns HTTPResponse.Status
func (r PostRegisterFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegisterFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRemovePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message string `json:"message"`
	}
	JSON400 *struct {
		Error   PostRemovePost400Error `json:"error"`
		Message *string                `json:"message,omitempty"`
	}
	JSON401 *struct {
		Error   PostRemovePost401Error `json:"error"`
		Message *string                `json:"message,omitempty"`
	}
	JSON404 *struct {
		Error   PostRemovePost404Error `json:"error"`
		Message *string                `json:"message,omitempty"`
	}
	JSON500 *struct {
		Error   PostRemovePost500Error `json:"error"`
		Message *string                `json:"message,omitempty"`
	}
}
type PostRemovePost400Error string
type PostRemovePost401Error string
type PostRemovePost404Error string
type PostRemovePost500Error string

// Status returns HTTPResponse.Status
func (r PostRemovePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRemovePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTrimFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DeletedCount float32 `json:"deletedCount"`
		Message      string  `json:"message"`
	}
	JSON400 *struct {
		Error   PostTrimFeed400Error `json:"error"`
		Message *string              `json:"message,omitempty"`
	}
	JSON401 *struct {
		Error   PostTrimFeed401Error `json:"error"`
		Message *string              `json:"message,omitempty"`
	}
	JSON404 *struct {
		Error   PostTrimFeed404Error `json:"error"`
		Message *string              `json:"message,omitempty"`
	}
	JSON500 *struct {
		Error   PostTrimFeed500Error `json:"error"`
		Message *string              `json:"message,omitempty"`
	}
}
type PostTrimFeed400Error string
type PostTrimFeed401Error string
type PostTrimFeed404Error string
type PostTrimFeed500Error string

// Status returns HTTPResponse.Status
func (r PostTrimFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTrimFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUnregisterFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message string `json:"message"`
	}
	JSON400 *struct {
		Error   PostUnregisterFeed400Error `json:"error"`
		Message *string                    `json:"message,omitempty"`
	}
	JSON401 *struct {
		Error   PostUnregisterFeed401Error `json:"error"`
		Message *string                    `json:"message,omitempty"`
	}
	JSON404 *struct {
		Error   PostUnregisterFeed404Error `json:"error"`
		Message *string                    `json:"message,omitempty"`
	}
	JSON500 *struct {
		Error   PostUnregisterFeed500Error `json:"error"`
		Message *string                    `json:"message,omitempty"`
	}
}
type PostUnregisterFeed400Error string
type PostUnregisterFeed401Error string
type PostUnregisterFeed404Error string
type PostUnregisterFeed500Error string

// Status returns HTTPResponse.Status
func (r PostUnregisterFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUnregisterFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Feed struct {
			IsActive   bool   `json:"isActive"`
			LangFilter bool   `json:"langFilter"`
			Uri        string `json:"uri"`
		} `json:"feed"`
		Message string `json:"message"`
	}
	JSON400 *struct {
		Error   PostUpdateFeed400Error `json:"error"`
		Message *string                `json:"message,omitempty"`
	}
	JSON401 *struct {
		Error   PostUpdateFeed401Error `json:"error"`
		Message *string                `json:"message,omitempty"`
	}
	JSON404 *struct {
		Error   PostUpdateFeed404Error `json:"error"`
		Message *string                `json:"message,omitempty"`
	}
	JSON500 *struct {
		Error   PostUpdateFeed500Error `json:"error"`
		Message *string                `json:"message,omitempty"`
	}
}
type PostUpdateFeed400Error string
type PostUpdateFeed401Error string
type PostUpdateFeed404Error string
type PostUpdateFeed500Error string

// Status returns HTTPResponse.Status
func (r PostUpdateFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message string `json:"message"`
	}
	JSON401 *struct {
		Error   GetPing401Error `json:"error"`
		Message *string         `json:"message,omitempty"`
	}
	JSON500 *struct {
		Error   GetPing500Error `json:"error"`
		Message *string         `json:"message,omitempty"`
	}
}
type GetPing401Error string
type GetPing500Error string

// Status returns HTTPResponse.Status
func (r GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUpdateDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Content *string                   `json:"content"`
		Type    PostUpdateDocument200Type `json:"type"`
		Url     *string                   `json:"url"`
	}
	JSON400 *struct {
		Error   PostUpdateDocument400Error `json:"error"`
		Message *string                    `json:"message,omitempty"`
	}
	JSON401 *struct {
		Error   PostUpdateDocument401Error `json:"error"`
		Message *string                    `json:"message,omitempty"`
	}
	JSON500 *struct {
		Error   PostUpdateDocument500Error `json:"error"`
		Message *string                    `json:"message,omitempty"`
	}
}
type PostUpdateDocument200Type string
type PostUpdateDocument400Error string
type PostUpdateDocument401Error string
type PostUpdateDocument500Error string

// Status returns HTTPResponse.Status
func (r PostUpdateDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUpdateDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAddPostWithBodyWithResponse request with arbitrary body returning *PostAddPostResponse
func (c *ClientWithResponses) PostAddPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAddPostResponse, error) {
	rsp, err := c.PostAddPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddPostResponse(rsp)
}

func (c *ClientWithResponses) PostAddPostWithResponse(ctx context.Context, body PostAddPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAddPostResponse, error) {
	rsp, err := c.PostAddPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddPostResponse(rsp)
}

// GetGetPostsWithResponse request returning *GetGetPostsResponse
func (c *ClientWithResponses) GetGetPostsWithResponse(ctx context.Context, params *GetGetPostsParams, reqEditors ...RequestEditorFn) (*GetGetPostsResponse, error) {
	rsp, err := c.GetGetPosts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGetPostsResponse(rsp)
}

// GetListFeedsWithResponse request returning *GetListFeedsResponse
func (c *ClientWithResponses) GetListFeedsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetListFeedsResponse, error) {
	rsp, err := c.GetListFeeds(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListFeedsResponse(rsp)
}

// PostRegisterFeedWithBodyWithResponse request with arbitrary body returning *PostRegisterFeedResponse
func (c *ClientWithResponses) PostRegisterFeedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterFeedResponse, error) {
	rsp, err := c.PostRegisterFeedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterFeedResponse(rsp)
}

func (c *ClientWithResponses) PostRegisterFeedWithResponse(ctx context.Context, body PostRegisterFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterFeedResponse, error) {
	rsp, err := c.PostRegisterFeed(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterFeedResponse(rsp)
}

// PostRemovePostWithBodyWithResponse request with arbitrary body returning *PostRemovePostResponse
func (c *ClientWithResponses) PostRemovePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRemovePostResponse, error) {
	rsp, err := c.PostRemovePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRemovePostResponse(rsp)
}

func (c *ClientWithResponses) PostRemovePostWithResponse(ctx context.Context, body PostRemovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRemovePostResponse, error) {
	rsp, err := c.PostRemovePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRemovePostResponse(rsp)
}

// PostTrimFeedWithBodyWithResponse request with arbitrary body returning *PostTrimFeedResponse
func (c *ClientWithResponses) PostTrimFeedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTrimFeedResponse, error) {
	rsp, err := c.PostTrimFeedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTrimFeedResponse(rsp)
}

func (c *ClientWithResponses) PostTrimFeedWithResponse(ctx context.Context, body PostTrimFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTrimFeedResponse, error) {
	rsp, err := c.PostTrimFeed(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTrimFeedResponse(rsp)
}

// PostUnregisterFeedWithBodyWithResponse request with arbitrary body returning *PostUnregisterFeedResponse
func (c *ClientWithResponses) PostUnregisterFeedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUnregisterFeedResponse, error) {
	rsp, err := c.PostUnregisterFeedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnregisterFeedResponse(rsp)
}

func (c *ClientWithResponses) PostUnregisterFeedWithResponse(ctx context.Context, body PostUnregisterFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUnregisterFeedResponse, error) {
	rsp, err := c.PostUnregisterFeed(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUnregisterFeedResponse(rsp)
}

// PostUpdateFeedWithBodyWithResponse request with arbitrary body returning *PostUpdateFeedResponse
func (c *ClientWithResponses) PostUpdateFeedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateFeedResponse, error) {
	rsp, err := c.PostUpdateFeedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateFeedResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateFeedWithResponse(ctx context.Context, body PostUpdateFeedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateFeedResponse, error) {
	rsp, err := c.PostUpdateFeed(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateFeedResponse(rsp)
}

// GetPingWithResponse request returning *GetPingResponse
func (c *ClientWithResponses) GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

// PostUpdateDocumentWithBodyWithResponse request with arbitrary body returning *PostUpdateDocumentResponse
func (c *ClientWithResponses) PostUpdateDocumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUpdateDocumentResponse, error) {
	rsp, err := c.PostUpdateDocumentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateDocumentResponse(rsp)
}

func (c *ClientWithResponses) PostUpdateDocumentWithResponse(ctx context.Context, body PostUpdateDocumentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUpdateDocumentResponse, error) {
	rsp, err := c.PostUpdateDocument(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUpdateDocumentResponse(rsp)
}

// ParsePostAddPostResponse parses an HTTP response from a PostAddPostWithResponse call
func ParsePostAddPostResponse(rsp *http.Response) (*PostAddPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAddPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Feed    string `json:"feed"`
			Message string `json:"message"`
			Post    struct {
				Cid string `json:"cid"`

				// FeedContext Context passed through to the client and feed generator.
				FeedContext *string   `json:"feedContext,omitempty"`
				IndexedAt   time.Time `json:"indexedAt"`
				Languages   []string  `json:"languages"`

				// Reason Reason for including the post in the feed skeleton. Currently only 'repost' reason is supported.
				Reason *struct {
					Type PostAddPost200PostReasonType `json:"$type"`

					// Repost Repost uri for repost type.
					Repost *string `json:"repost,omitempty"`
				} `json:"reason,omitempty"`
				Uri string `json:"uri"`
			} `json:"post"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   PostAddPost400Error `json:"error"`
			Message *string             `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error   PostAddPost401Error `json:"error"`
			Message *string             `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error   PostAddPost404Error `json:"error"`
			Message *string             `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error   PostAddPost500Error `json:"error"`
			Message *string             `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGetPostsResponse parses an HTTP response from a GetGetPostsWithResponse call
func ParseGetGetPostsResponse(rsp *http.Response) (*GetGetPostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGetPostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cursor *string `json:"cursor,omitempty"`
			Feed   string  `json:"feed"`
			Posts  []struct {
				Cid         string    `json:"cid"`
				FeedContext *string   `json:"feedContext,omitempty"`
				IndexedAt   time.Time `json:"indexedAt"`
				Langs       []string  `json:"langs"`
				Reason      *struct {
					Repost string `json:"repost"`
				} `json:"reason,omitempty"`
				Uri string `json:"uri"`
			} `json:"posts"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   GetGetPosts400Error `json:"error"`
			Message *string             `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error   GetGetPosts401Error `json:"error"`
			Message *string             `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error   GetGetPosts404Error `json:"error"`
			Message *string             `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error   GetGetPosts500Error `json:"error"`
			Message *string             `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetListFeedsResponse parses an HTTP response from a GetListFeedsWithResponse call
func ParseGetListFeedsResponse(rsp *http.Response) (*GetListFeedsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListFeedsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Feeds []struct {
				IsActive   bool   `json:"isActive"`
				LangFilter bool   `json:"langFilter"`
				Uri        string `json:"uri"`
			} `json:"feeds"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error   GetListFeeds401Error `json:"error"`
			Message *string              `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error   GetListFeeds500Error `json:"error"`
			Message *string              `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostRegisterFeedResponse parses an HTTP response from a PostRegisterFeedWithResponse call
func ParsePostRegisterFeedResponse(rsp *http.Response) (*PostRegisterFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegisterFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Feed struct {
				IsActive   bool   `json:"isActive"`
				LangFilter bool   `json:"langFilter"`
				Uri        string `json:"uri"`
			} `json:"feed"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   PostRegisterFeed400Error `json:"error"`
			Message *string                  `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error   PostRegisterFeed401Error `json:"error"`
			Message *string                  `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Error   PostRegisterFeed409Error `json:"error"`
			Message string                   `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error   PostRegisterFeed500Error `json:"error"`
			Message *string                  `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostRemovePostResponse parses an HTTP response from a PostRemovePostWithResponse call
func ParsePostRemovePostResponse(rsp *http.Response) (*PostRemovePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRemovePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   PostRemovePost400Error `json:"error"`
			Message *string                `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error   PostRemovePost401Error `json:"error"`
			Message *string                `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error   PostRemovePost404Error `json:"error"`
			Message *string                `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error   PostRemovePost500Error `json:"error"`
			Message *string                `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTrimFeedResponse parses an HTTP response from a PostTrimFeedWithResponse call
func ParsePostTrimFeedResponse(rsp *http.Response) (*PostTrimFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTrimFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DeletedCount float32 `json:"deletedCount"`
			Message      string  `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   PostTrimFeed400Error `json:"error"`
			Message *string              `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error   PostTrimFeed401Error `json:"error"`
			Message *string              `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error   PostTrimFeed404Error `json:"error"`
			Message *string              `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error   PostTrimFeed500Error `json:"error"`
			Message *string              `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUnregisterFeedResponse parses an HTTP response from a PostUnregisterFeedWithResponse call
func ParsePostUnregisterFeedResponse(rsp *http.Response) (*PostUnregisterFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUnregisterFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   PostUnregisterFeed400Error `json:"error"`
			Message *string                    `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error   PostUnregisterFeed401Error `json:"error"`
			Message *string                    `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error   PostUnregisterFeed404Error `json:"error"`
			Message *string                    `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error   PostUnregisterFeed500Error `json:"error"`
			Message *string                    `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUpdateFeedResponse parses an HTTP response from a PostUpdateFeedWithResponse call
func ParsePostUpdateFeedResponse(rsp *http.Response) (*PostUpdateFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Feed struct {
				IsActive   bool   `json:"isActive"`
				LangFilter bool   `json:"langFilter"`
				Uri        string `json:"uri"`
			} `json:"feed"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   PostUpdateFeed400Error `json:"error"`
			Message *string                `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error   PostUpdateFeed401Error `json:"error"`
			Message *string                `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error   PostUpdateFeed404Error `json:"error"`
			Message *string                `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error   PostUpdateFeed500Error `json:"error"`
			Message *string                `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPingResponse parses an HTTP response from a GetPingWithResponse call
func ParseGetPingResponse(rsp *http.Response) (*GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error   GetPing401Error `json:"error"`
			Message *string         `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error   GetPing500Error `json:"error"`
			Message *string         `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUpdateDocumentResponse parses an HTTP response from a PostUpdateDocumentWithResponse call
func ParsePostUpdateDocumentResponse(rsp *http.Response) (*PostUpdateDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUpdateDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Content *string                   `json:"content"`
			Type    PostUpdateDocument200Type `json:"type"`
			Url     *string                   `json:"url"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error   PostUpdateDocument400Error `json:"error"`
			Message *string                    `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error   PostUpdateDocument401Error `json:"error"`
			Message *string                    `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error   PostUpdateDocument500Error `json:"error"`
			Message *string                    `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
